# JSG grammar for SPARQL.js JSON format
# test:
#    SPARQL.js/test/parsedQueries$ ../../../jsg/lib/cli.js -v *.json
# see: https://github.com/ericprud/jsg

op = query | update;
query { type:"query" base:IRI? prefixes:{PREFIX->IRI}? # absent in subqueries
  queryType:("SELECT"|"CONSTRUCT"|"DESCRIBE"|"ASK")
  from:fromSpec?
  reduced:BOOLEAN?
  variables:[VARIABLE|binding|STAR|IRI]? # IRI is for DESCRIBE arguments
  template:[triple]?
  where:[pattern]? # ASK query
  distinct:BOOLEAN? order:[order]? limit:NUMBER? offset:NUMBER?
  group:[groupBy]? having:[expression]?
  values:[valueBinding]?
}
fromSpec { default:[IRI] named:[IRI] }

update { type:"update"? prefixes:{PREFIX->IRI} updates:[updateOp]? }
updateOp = add|load|copy|move|insert|delete|insertdelete|deletewhere;
add { type:"add" silent:BOOLEAN? source:graphSpec destination:graphSpec? }
load { type:"load" silent:BOOLEAN? source:IRI destination:IRI? }
copy { type:"copy" silent:BOOLEAN? source:graphSpec destination:graphSpec }
move { type:"move" silent:BOOLEAN? source:graphSpec destination:graphSpec }
graphSpec { type:"graph" default:BOOLEAN? name:IRI? }
insert { updateType:"insert" insert:[pattern] where:[pattern]? }
delete { updateType:"delete" delete:[pattern] where:[pattern]? }
insertdelete { updateType:"insertdelete" graph:(IRI|BNODE|VARIABLE)? insert:[pattern] delete:[pattern] where:[pattern]? }
deletewhere { updateType:"deletewhere" delete:[pattern] }

binding { expression:expression variable:VARIABLE }
pattern = bgp | optional | union | group | minus | graph | service | filter | bind | query | values; # move to where
bgp { type:"bgp" triples:[triple] }
triple { subject:(IRI|BNODE|VARIABLE) predicate:predicateOrPath object:(IRI|BNODE|RDFLiteral|VARIABLE) }
predicateOrPath = IRI|VARIABLE|path;
path { type:"path" pathType:("|"|"/"|"|"|"^"|"+"|"*"|"!") items:[predicateOrPath] }
optional { type:"optional" patterns:[pattern] }
union { type:"union" patterns:[pattern] }
group { type:"group" patterns:[pattern] }
minus { type:"minus" patterns:[pattern] }
graph { type:"graph" name:(IRI|BNODE|VARIABLE) patterns:[pattern]? triples:[triple]? }
service { type:"service" name:(IRI|BNODE|VARIABLE) patterns:[pattern] silent:BOOLEAN }
filter { type:"filter" expression:expression }
bind { type:"bind" variable:VARIABLE expression:expression }
values { type:"values" values:[valueBinding] }
valueBinding {VARIABLE->value}
value = IRI|BNODE|RDFLiteral|UNDEFINED;

expression = operation | functionCall | aggregate | IRI | BNODE | RDFLiteral | VARIABLE;
operation { type:"operation" operator:(
   "<="|"="|"<"|">"|"!"|"!="|
   "&&"|"||"|
   "+"|"-"|"*"|"/"|
   "str"|"strlen"|"bound"|"lang"|"langmatches"|"in"|"notin"|"sameterm"|"isiri"|"isblank"|"isliteral"|"regex"|"datatype"|"exists"|"notexists"
  ) args:[expression|pattern|STRING] } # exists
functionCall { type:"functionCall" function:IRI args:[expression] distinct:BOOLEAN? }
aggregate { type:"aggregate" expression:(expression|STAR) aggregation:(
   "count"|"group_concat"|"sum"|"avg"|"min"|"max"
  ) separator:STRING? distinct:BOOLEAN }
order { expression:expression descending:BOOLEAN? }
groupBy { expression:expression variable:VARIABLE? }
RDFLiteral = SIMPLE_LITERAL | DATATYPE_LITERAL | LANG_LITERAL ;

# Terminals used in productions:
VARIABLE: "?" VARNAME ;
BOOLEAN: "true"|"false" ;
NUMBER: [0-9]+ ;
STAR: "*" ;

PREFIX           : PN_PREFIX? ; # <http://www.w3.org/TR/turtle/#grammar-production-PNAME_NS> - ":"
IRI              : (PN_CHARS | '.' | ':' | '/' | '\\' | '#' | '@' | '%' | '&' | UCHAR)* ; # <http://www.w3.org/TR/turtle/#grammar-production-IRIREF> - "<>"s
BNODE            : '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)? ; # <http://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL>
BOOL             : "true" | "false" ; # JSON boolean tokens
INTEGER          : [+-]? [0-9]+ ; # <http://www.w3.org/TR/turtle/#grammar-production-INTEGER>
DECIMAL          : [+-]? [0-9]* '.' [0-9] + ; # <http://www.w3.org/TR/turtle/#grammar-production-DECIMAL>
DOUBLE           : [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT) ; # <http://www.w3.org/TR/turtle/#grammar-production-DOUBLE>
SIMPLE_LITERAL   : '"' ([^"\\] | '\\' ["bnrt])* '"' ; # JSON string with '"' at beginning and end
DATATYPE_LITERAL : SIMPLE_LITERAL "^^" IRI ; # JSON string with '"' at beginning, an unescaped '"' followed by '^^' and an IRI
LANG_LITERAL     : SIMPLE_LITERAL LANGTAG ; # JSON string with '"' at beginning, an unescaped '"' followed by '@' and a Turtle LANGTAG                   
STRING           : .* ;

# Terminals use only in other terminals:
PN_PREFIX        : PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)? ;
PN_CHARS_BASE    : [A-Z] | [a-z] | [\u00C0-\u00D6] | [\u00D8-\u00F6]
                 | [\u00F8-\u02FF] | [\u0370-\u037D] | [\u037F-\u1FFF]
                 | [\u200C-\u200D] | [\u2070-\u218F] | [\u2C00-\u2FEF]
                 | [\u3001-\uD7FF] | [\uF900-\uFDCF] | [\uFDF0-\uFFFD]
                 | [\u10000-\uEFFFF] ;
VARNAME          : (PN_CHARS_U | [0-9]) (PN_CHARS_U | [0-9] | [\u00B7] | [\u0300-\u036F] | [\u203F-\u2040])* ;
PN_CHARS         : PN_CHARS_U | '-' | [0-9] | '\u00B7' | [\u0300-\u036F] | [\u203F-\u2040] ;
PN_CHARS_U       : PN_CHARS_BASE | '_' ;
UCHAR            : '\\u' HEX HEX HEX HEX
                 | '\\U' HEX HEX HEX HEX HEX HEX HEX HEX ;
HEX              : [0-9] | [A-F] | [a-f] ;
EXPONENT         : [eE] [+-]? [0-9]+ ;
LANGTAG          : '@' [a-zA-Z] + ('-' [a-zA-Z0-9] +)* ;
UNDEFINED        : '{undefined}' ;